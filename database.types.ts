// The complex, recursive Json type was causing the Supabase client to silently
// fail on initialization, leading to an infinite loading spinner.
// Replacing it with `any` is a standard, effective workaround for this issue.
export type Json = any;

// A flat, explicit type for a row from the 'dockets' table.
// This is used in the main Database interface to keep it simple for the TS compiler.
export type DocketDatabaseRow = {
    id: string;
    client: Json;
    status: string;
    tag: string;
    agent_id: string | null;
    passengers: Json;
    itinerary: Json;
    files: Json;
    comments: Json;
    payments: Json;
    invoices: Json;
    search_tags: string[];
    created_by: string;
    created_at: string;
    updated_at: string;
};

// A flat, explicit type for a row from the 'profiles' table.
export type ProfileDatabaseRow = {
    id: string;
    role: "admin" | "user";
    name: string;
    email: string | null;
};


// By defining table types explicitly without complex utility types like Omit or Partial
// directly within the interface, we help the TypeScript compiler avoid "excessively deep"
// type errors that were causing Supabase calls to fail type-checking.

export interface Database {
  public: {
    Tables: {
      agents: {
        Row: {
          id: string;
          name: string;
          contactInfo: string;
        };
        Insert: {
          id: string;
          name: string;
          contactInfo: string;
        };
        Update: {
          id?: string;
          name?: string;
          contactInfo?: string;
        };
      };
      company_settings: {
        Row: {
          id: number;
          settings: Json;
        };
        Insert: {
          id: number;
          settings: Json;
        };
        Update: {
          id?: number;
          settings?: Json;
        };
      };
      deletion_log: {
        Row: {
          id: number;
          docketId: string;
          clientName: string;
          deletedBy: string;
          deletedAt: string;
          reason: string;
        };
        Insert: { // `id` is auto-generated by the DB
          docketId: string;
          clientName: string;
          deletedBy: string;
          deletedAt: string;
          reason: string;
        };
        Update: {
          id?: number;
          docketId?: string;
          clientName?: string;
          deletedBy?: string;
          deletedAt?: string;
          reason?: string;
        };
      };
      dockets: {
        Row: DocketDatabaseRow;
        Insert: DocketDatabaseRow;
        Update: {
            id?: string;
            client?: Json;
            status?: string;
            tag?: string;
            agent_id?: string | null;
            passengers?: Json;
            itinerary?: Json;
            files?: Json;
            comments?: Json;
            payments?: Json;
            invoices?: Json;
            search_tags?: string[];
            created_by?: string;
            created_at?: string;
            updated_at?: string;
        };
      };
      profiles: {
        Row: ProfileDatabaseRow;
        Insert: { // All fields are optional because profile is created via trigger.
          id?: string;
          role?: "admin" | "user";
          name?: string;
          email?: string | null;
        };
        Update: {
          id?: string;
          role?: "admin" | "user";
          name?: string;
          email?: string | null;
        };
      };
      suppliers: {
        Row: {
          id: string;
          name: string;
          contactPerson: string;
          contactNumber: string;
        };
        Insert: {
          id: string;
          name: string;
          contactPerson: string;
          contactNumber: string;
        };
        Update: {
          id?: string;
          name?: string;
          contactPerson?: string;
          contactNumber?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}
